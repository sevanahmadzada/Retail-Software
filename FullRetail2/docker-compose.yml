version: '3.1'
services:


  API:
    image: 'tt.jar'
    container_name: backend
    ports:
      - "443:443"
    depends_on:
      PostgreSql:
        condition: service_healthy
      Mongo:
        condition: service_healthy


    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://PostgreSQL:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create
      - SPRING_DATA_MONGODB_HOST=mongo
      - SPRING_DATA_MONGODB_PORT=27017
      - SPRING_DATA_MONGODB_DATABASE=mongo
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
    networks:
      - spring

  PostgreSql:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - spring

  Mongo:
    image: mongo:latest
    command: mongod --port 27017 --auth
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/var/lib/mong/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=password
    restart: unless-stopped
    networks:
      - spring
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s


  mongo-express:
    container_name: mongo-express
    image: mongo-express:latest
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=mongo
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=Mongo
      - ME_CONFIG_MONGODB_PORT=27017
    depends_on:
      Mongo:
        condition: service_healthy
    networks:
      - spring


#  UI:
#    build:
#      context: FrontEnd
#      dockerfile: Dockerfile
#      args:
#        REACT_APP_API_BASE_URL: http://localhost:3000/
#    ports:
#      - "3000:3000"
#    restart: always
#    depends_on:
#      - API
#    networks:
#      - spring
#  ui:
#    container_name: ui
#    build: FrontEnd
#    ports:
#      - 8080:80


  16-bits-front-end:
    image: ui
    container_name: front-end
    ports:
      - "3000:3000"
    networks:
      - spring

volumes:
  postgres_data:
  mongo_data:

networks:
  spring:
    driver: bridge